/* automatically generated by rust-bindgen */

pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __clang_max_align_nonce1: ::libc::c_longlong,
    pub __clang_max_align_nonce2: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed1;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed2;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed3;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed4;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed5 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed7 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed9;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed10 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed11 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar; 7usize],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed12;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed14 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sigevent { }
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_gnutls_cipher_algorithm {
    GNUTLS_CIPHER_UNKNOWN = 0,
    GNUTLS_CIPHER_NULL = 1,
    GNUTLS_CIPHER_ARCFOUR_128 = 2,
    GNUTLS_CIPHER_3DES_CBC = 3,
    GNUTLS_CIPHER_AES_128_CBC = 4,
    GNUTLS_CIPHER_AES_256_CBC = 5,
    GNUTLS_CIPHER_ARCFOUR_40 = 6,
    GNUTLS_CIPHER_CAMELLIA_128_CBC = 7,
    GNUTLS_CIPHER_CAMELLIA_256_CBC = 8,
    GNUTLS_CIPHER_AES_192_CBC = 9,
    GNUTLS_CIPHER_AES_128_GCM = 10,
    GNUTLS_CIPHER_AES_256_GCM = 11,
    GNUTLS_CIPHER_CAMELLIA_192_CBC = 12,
    GNUTLS_CIPHER_SALSA20_256 = 13,
    GNUTLS_CIPHER_ESTREAM_SALSA20_256 = 14,
    GNUTLS_CIPHER_CAMELLIA_128_GCM = 15,
    GNUTLS_CIPHER_CAMELLIA_256_GCM = 16,
    GNUTLS_CIPHER_RC2_40_CBC = 17,
    GNUTLS_CIPHER_DES_CBC = 18,
    GNUTLS_CIPHER_AES_128_CCM = 19,
    GNUTLS_CIPHER_AES_256_CCM = 20,
    GNUTLS_CIPHER_AES_128_CCM_8 = 21,
    GNUTLS_CIPHER_AES_256_CCM_8 = 22,
    GNUTLS_CIPHER_CHACHA20_POLY1305 = 23,
    GNUTLS_CIPHER_IDEA_PGP_CFB = 200,
    GNUTLS_CIPHER_3DES_PGP_CFB = 201,
    GNUTLS_CIPHER_CAST5_PGP_CFB = 202,
    GNUTLS_CIPHER_BLOWFISH_PGP_CFB = 203,
    GNUTLS_CIPHER_SAFER_SK128_PGP_CFB = 204,
    GNUTLS_CIPHER_AES128_PGP_CFB = 205,
    GNUTLS_CIPHER_AES192_PGP_CFB = 206,
    GNUTLS_CIPHER_AES256_PGP_CFB = 207,
    GNUTLS_CIPHER_TWOFISH_PGP_CFB = 208,
}
pub type gnutls_cipher_algorithm_t = Enum_gnutls_cipher_algorithm;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed15 {
    GNUTLS_KX_UNKNOWN = 0,
    GNUTLS_KX_RSA = 1,
    GNUTLS_KX_DHE_DSS = 2,
    GNUTLS_KX_DHE_RSA = 3,
    GNUTLS_KX_ANON_DH = 4,
    GNUTLS_KX_SRP = 5,
    GNUTLS_KX_RSA_EXPORT = 6,
    GNUTLS_KX_SRP_RSA = 7,
    GNUTLS_KX_SRP_DSS = 8,
    GNUTLS_KX_PSK = 9,
    GNUTLS_KX_DHE_PSK = 10,
    GNUTLS_KX_ANON_ECDH = 11,
    GNUTLS_KX_ECDHE_RSA = 12,
    GNUTLS_KX_ECDHE_ECDSA = 13,
    GNUTLS_KX_ECDHE_PSK = 14,
    GNUTLS_KX_RSA_PSK = 15,
}
pub type gnutls_kx_algorithm_t = Enum_Unnamed15;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed16 {
    GNUTLS_PARAMS_RSA_EXPORT = 1,
    GNUTLS_PARAMS_DH = 2,
    GNUTLS_PARAMS_ECDH = 3,
}
pub type gnutls_params_type_t = Enum_Unnamed16;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed17 {
    GNUTLS_CRD_CERTIFICATE = 1,
    GNUTLS_CRD_ANON = 2,
    GNUTLS_CRD_SRP = 3,
    GNUTLS_CRD_PSK = 4,
    GNUTLS_CRD_IA = 5,
}
pub type gnutls_credentials_type_t = Enum_Unnamed17;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed18 {
    GNUTLS_MAC_UNKNOWN = 0,
    GNUTLS_MAC_NULL = 1,
    GNUTLS_MAC_MD5 = 2,
    GNUTLS_MAC_SHA1 = 3,
    GNUTLS_MAC_RMD160 = 4,
    GNUTLS_MAC_MD2 = 5,
    GNUTLS_MAC_SHA256 = 6,
    GNUTLS_MAC_SHA384 = 7,
    GNUTLS_MAC_SHA512 = 8,
    GNUTLS_MAC_SHA224 = 9,
    GNUTLS_MAC_AEAD = 200,
    GNUTLS_MAC_UMAC_96 = 201,
    GNUTLS_MAC_UMAC_128 = 202,
}
pub type gnutls_mac_algorithm_t = Enum_Unnamed18;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed19 {
    GNUTLS_DIG_UNKNOWN = 0,
    GNUTLS_DIG_NULL = 1,
    GNUTLS_DIG_MD5 = 2,
    GNUTLS_DIG_SHA1 = 3,
    GNUTLS_DIG_RMD160 = 4,
    GNUTLS_DIG_MD2 = 5,
    GNUTLS_DIG_SHA256 = 6,
    GNUTLS_DIG_SHA384 = 7,
    GNUTLS_DIG_SHA512 = 8,
    GNUTLS_DIG_SHA224 = 9,
}
pub type gnutls_digest_algorithm_t = Enum_Unnamed19;
pub const GNUTLS_COMP_ZLIB: Enum_Unnamed20 =
    Enum_Unnamed20::GNUTLS_COMP_DEFLATE;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed20 {
    GNUTLS_COMP_UNKNOWN = 0,
    GNUTLS_COMP_NULL = 1,
    GNUTLS_COMP_DEFLATE = 2,
}
pub type gnutls_compression_method_t = Enum_Unnamed20;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed21 { GNUTLS_AL_WARNING = 1, GNUTLS_AL_FATAL = 2, }
pub type gnutls_alert_level_t = Enum_Unnamed21;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed22 {
    GNUTLS_A_CLOSE_NOTIFY = 0,
    GNUTLS_A_UNEXPECTED_MESSAGE = 10,
    GNUTLS_A_BAD_RECORD_MAC = 20,
    GNUTLS_A_DECRYPTION_FAILED = 21,
    GNUTLS_A_RECORD_OVERFLOW = 22,
    GNUTLS_A_DECOMPRESSION_FAILURE = 30,
    GNUTLS_A_HANDSHAKE_FAILURE = 40,
    GNUTLS_A_SSL3_NO_CERTIFICATE = 41,
    GNUTLS_A_BAD_CERTIFICATE = 42,
    GNUTLS_A_UNSUPPORTED_CERTIFICATE = 43,
    GNUTLS_A_CERTIFICATE_REVOKED = 44,
    GNUTLS_A_CERTIFICATE_EXPIRED = 45,
    GNUTLS_A_CERTIFICATE_UNKNOWN = 46,
    GNUTLS_A_ILLEGAL_PARAMETER = 47,
    GNUTLS_A_UNKNOWN_CA = 48,
    GNUTLS_A_ACCESS_DENIED = 49,
    GNUTLS_A_DECODE_ERROR = 50,
    GNUTLS_A_DECRYPT_ERROR = 51,
    GNUTLS_A_EXPORT_RESTRICTION = 60,
    GNUTLS_A_PROTOCOL_VERSION = 70,
    GNUTLS_A_INSUFFICIENT_SECURITY = 71,
    GNUTLS_A_INTERNAL_ERROR = 80,
    GNUTLS_A_INAPPROPRIATE_FALLBACK = 86,
    GNUTLS_A_USER_CANCELED = 90,
    GNUTLS_A_NO_RENEGOTIATION = 100,
    GNUTLS_A_UNSUPPORTED_EXTENSION = 110,
    GNUTLS_A_CERTIFICATE_UNOBTAINABLE = 111,
    GNUTLS_A_UNRECOGNIZED_NAME = 112,
    GNUTLS_A_UNKNOWN_PSK_IDENTITY = 115,
    GNUTLS_A_NO_APPLICATION_PROTOCOL = 120,
}
pub type gnutls_alert_description_t = Enum_Unnamed22;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed23 {
    GNUTLS_HANDSHAKE_HELLO_REQUEST = 0,
    GNUTLS_HANDSHAKE_CLIENT_HELLO = 1,
    GNUTLS_HANDSHAKE_SERVER_HELLO = 2,
    GNUTLS_HANDSHAKE_HELLO_VERIFY_REQUEST = 3,
    GNUTLS_HANDSHAKE_NEW_SESSION_TICKET = 4,
    GNUTLS_HANDSHAKE_CERTIFICATE_PKT = 11,
    GNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE = 12,
    GNUTLS_HANDSHAKE_CERTIFICATE_REQUEST = 13,
    GNUTLS_HANDSHAKE_SERVER_HELLO_DONE = 14,
    GNUTLS_HANDSHAKE_CERTIFICATE_VERIFY = 15,
    GNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE = 16,
    GNUTLS_HANDSHAKE_FINISHED = 20,
    GNUTLS_HANDSHAKE_CERTIFICATE_STATUS = 22,
    GNUTLS_HANDSHAKE_SUPPLEMENTAL = 23,
    GNUTLS_HANDSHAKE_CHANGE_CIPHER_SPEC = 254,
    GNUTLS_HANDSHAKE_CLIENT_HELLO_V2 = 1024,
}
pub type gnutls_handshake_description_t = Enum_Unnamed23;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed24 {
    GNUTLS_CERT_INVALID = 2,
    GNUTLS_CERT_REVOKED = 32,
    GNUTLS_CERT_SIGNER_NOT_FOUND = 64,
    GNUTLS_CERT_SIGNER_NOT_CA = 128,
    GNUTLS_CERT_INSECURE_ALGORITHM = 256,
    GNUTLS_CERT_NOT_ACTIVATED = 512,
    GNUTLS_CERT_EXPIRED = 1024,
    GNUTLS_CERT_SIGNATURE_FAILURE = 2048,
    GNUTLS_CERT_REVOCATION_DATA_SUPERSEDED = 4096,
    GNUTLS_CERT_UNEXPECTED_OWNER = 16384,
    GNUTLS_CERT_REVOCATION_DATA_ISSUED_IN_FUTURE = 32768,
    GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE = 65536,
    GNUTLS_CERT_MISMATCH = 131072,
    GNUTLS_CERT_PURPOSE_MISMATCH = 262144,
}
pub type gnutls_certificate_status_t = Enum_Unnamed24;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed25 {
    GNUTLS_CERT_IGNORE = 0,
    GNUTLS_CERT_REQUEST = 1,
    GNUTLS_CERT_REQUIRE = 2,
}
pub type gnutls_certificate_request_t = Enum_Unnamed25;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed26 {
    GNUTLS_OPENPGP_CERT = 0,
    GNUTLS_OPENPGP_CERT_FINGERPRINT = 1,
}
pub type gnutls_openpgp_crt_status_t = Enum_Unnamed26;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed27 { GNUTLS_SHUT_RDWR = 0, GNUTLS_SHUT_WR = 1, }
pub type gnutls_close_request_t = Enum_Unnamed27;
pub const GNUTLS_TLS1: Enum_Unnamed28 = Enum_Unnamed28::GNUTLS_TLS1_0;
pub const GNUTLS_DTLS_VERSION_MIN: Enum_Unnamed28 =
    Enum_Unnamed28::GNUTLS_DTLS0_9;
pub const GNUTLS_DTLS_VERSION_MAX: Enum_Unnamed28 =
    Enum_Unnamed28::GNUTLS_DTLS1_2;
pub const GNUTLS_TLS_VERSION_MAX: Enum_Unnamed28 =
    Enum_Unnamed28::GNUTLS_TLS1_2;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed28 {
    GNUTLS_SSL3 = 1,
    GNUTLS_TLS1_0 = 2,
    GNUTLS_TLS1_1 = 3,
    GNUTLS_TLS1_2 = 4,
    GNUTLS_DTLS0_9 = 200,
    GNUTLS_DTLS1_0 = 201,
    GNUTLS_DTLS1_2 = 202,
    GNUTLS_VERSION_UNKNOWN = 255,
}
pub type gnutls_protocol_t = Enum_Unnamed28;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed29 {
    GNUTLS_CRT_UNKNOWN = 0,
    GNUTLS_CRT_X509 = 1,
    GNUTLS_CRT_OPENPGP = 2,
    GNUTLS_CRT_RAW = 3,
}
pub type gnutls_certificate_type_t = Enum_Unnamed29;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed30 { GNUTLS_X509_FMT_DER = 0, GNUTLS_X509_FMT_PEM = 1, }
pub type gnutls_x509_crt_fmt_t = Enum_Unnamed30;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_gnutls_certificate_print_formats {
    GNUTLS_CRT_PRINT_FULL = 0,
    GNUTLS_CRT_PRINT_ONELINE = 1,
    GNUTLS_CRT_PRINT_UNSIGNED_FULL = 2,
    GNUTLS_CRT_PRINT_COMPACT = 3,
    GNUTLS_CRT_PRINT_FULL_NUMBERS = 4,
}
pub type gnutls_certificate_print_formats_t =
    Enum_gnutls_certificate_print_formats;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed31 {
    GNUTLS_PK_UNKNOWN = 0,
    GNUTLS_PK_RSA = 1,
    GNUTLS_PK_DSA = 2,
    GNUTLS_PK_DH = 3,
    GNUTLS_PK_EC = 4,
}
pub type gnutls_pk_algorithm_t = Enum_Unnamed31;
pub const GNUTLS_SIGN_RSA_SHA: Enum_Unnamed32 =
    Enum_Unnamed32::GNUTLS_SIGN_RSA_SHA1;
pub const GNUTLS_SIGN_DSA_SHA: Enum_Unnamed32 =
    Enum_Unnamed32::GNUTLS_SIGN_DSA_SHA1;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed32 {
    GNUTLS_SIGN_UNKNOWN = 0,
    GNUTLS_SIGN_RSA_SHA1 = 1,
    GNUTLS_SIGN_DSA_SHA1 = 2,
    GNUTLS_SIGN_RSA_MD5 = 3,
    GNUTLS_SIGN_RSA_MD2 = 4,
    GNUTLS_SIGN_RSA_RMD160 = 5,
    GNUTLS_SIGN_RSA_SHA256 = 6,
    GNUTLS_SIGN_RSA_SHA384 = 7,
    GNUTLS_SIGN_RSA_SHA512 = 8,
    GNUTLS_SIGN_RSA_SHA224 = 9,
    GNUTLS_SIGN_DSA_SHA224 = 10,
    GNUTLS_SIGN_DSA_SHA256 = 11,
    GNUTLS_SIGN_ECDSA_SHA1 = 12,
    GNUTLS_SIGN_ECDSA_SHA224 = 13,
    GNUTLS_SIGN_ECDSA_SHA256 = 14,
    GNUTLS_SIGN_ECDSA_SHA384 = 15,
    GNUTLS_SIGN_ECDSA_SHA512 = 16,
    GNUTLS_SIGN_DSA_SHA384 = 17,
    GNUTLS_SIGN_DSA_SHA512 = 18,
}
pub type gnutls_sign_algorithm_t = Enum_Unnamed32;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed33 {
    GNUTLS_ECC_CURVE_INVALID = 0,
    GNUTLS_ECC_CURVE_SECP224R1 = 1,
    GNUTLS_ECC_CURVE_SECP256R1 = 2,
    GNUTLS_ECC_CURVE_SECP384R1 = 3,
    GNUTLS_ECC_CURVE_SECP521R1 = 4,
    GNUTLS_ECC_CURVE_SECP192R1 = 5,
}
pub type gnutls_ecc_curve_t = Enum_Unnamed33;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed34 {
    GNUTLS_SEC_PARAM_UNKNOWN = 0,
    GNUTLS_SEC_PARAM_INSECURE = 5,
    GNUTLS_SEC_PARAM_EXPORT = 10,
    GNUTLS_SEC_PARAM_VERY_WEAK = 15,
    GNUTLS_SEC_PARAM_WEAK = 20,
    GNUTLS_SEC_PARAM_LOW = 25,
    GNUTLS_SEC_PARAM_LEGACY = 30,
    GNUTLS_SEC_PARAM_MEDIUM = 35,
    GNUTLS_SEC_PARAM_HIGH = 40,
    GNUTLS_SEC_PARAM_ULTRA = 45,
    GNUTLS_SEC_PARAM_FUTURE = 50,
}
pub type gnutls_sec_param_t = Enum_Unnamed34;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed35 { GNUTLS_CB_TLS_UNIQUE = 0, _DUMMY_UNNAMED_35 }
pub type gnutls_channel_binding_t = Enum_Unnamed35;
pub type gnutls_transport_ptr_t = *mut ::libc::c_void;
pub enum Struct_gnutls_session_int { }
pub type gnutls_session_t = *mut Struct_gnutls_session_int;
pub enum Struct_gnutls_dh_params_int { }
pub type gnutls_dh_params_t = *mut Struct_gnutls_dh_params_int;
pub enum Struct_gnutls_x509_privkey_int { }
pub type gnutls_rsa_params_t = *mut Struct_gnutls_x509_privkey_int;
pub enum Struct_gnutls_priority_st { }
pub type gnutls_priority_t = *mut Struct_gnutls_priority_st;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub data: *mut ::libc::c_uchar,
    pub size: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gnutls_datum_t = Struct_Unnamed36;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_gnutls_params_st {
    pub _type: gnutls_params_type_t,
    pub params: Union_params,
    pub deinit: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_gnutls_params_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_gnutls_params_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_params {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_params {
    pub unsafe fn dh(&mut self) -> *mut gnutls_dh_params_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rsa_export(&mut self) -> *mut gnutls_rsa_params_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_params {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gnutls_params_st = Struct_gnutls_params_st;
pub type gnutls_params_function =
    unsafe extern "C" fn(arg1: gnutls_session_t, arg2: gnutls_params_type_t,
                         arg3: *mut gnutls_params_st) -> ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub low: size_t,
    pub high: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gnutls_range_st = Struct_Unnamed37;
pub enum Struct_mbuffer_st { }
pub type gnutls_packet_t = *mut Struct_mbuffer_st;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed38 { GNUTLS_NAME_DNS = 1, _DUMMY_UNNAMED_37 }
pub type gnutls_server_name_type_t = Enum_Unnamed38;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed39 { GNUTLS_SUPPLEMENTAL_UNKNOWN = 0, _DUMMY_UNNAMED_39 }
pub type gnutls_supplemental_data_format_type_t = Enum_Unnamed39;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed40 {
    GNUTLS_SRTP_AES128_CM_HMAC_SHA1_80 = 1,
    GNUTLS_SRTP_AES128_CM_HMAC_SHA1_32 = 2,
    GNUTLS_SRTP_NULL_HMAC_SHA1_80 = 5,
    GNUTLS_SRTP_NULL_HMAC_SHA1_32 = 6,
}
pub type gnutls_srtp_profile_t = Enum_Unnamed40;
pub type gnutls_certificate_verify_function =
    extern "C" fn(arg1: gnutls_session_t) -> ::libc::c_int;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed41 {
    GNUTLS_DT_UNKNOWN = 0,
    GNUTLS_DT_DNS_HOSTNAME = 1,
    GNUTLS_DT_KEY_PURPOSE_OID = 2,
    GNUTLS_DT_RFC822NAME = 3,
}
pub type gnutls_vdata_types_t = Enum_Unnamed41;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed42 {
    pub _type: gnutls_vdata_types_t,
    pub data: *mut ::libc::c_uchar,
    pub size: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed42 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed42 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gnutls_typed_vdata_st = Struct_Unnamed42;
pub type gnutls_db_store_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void,
                                               key: gnutls_datum_t,
                                               data: gnutls_datum_t)
                              -> ::libc::c_int>;
pub type gnutls_db_remove_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void,
                                               key: gnutls_datum_t)
                              -> ::libc::c_int>;
pub type gnutls_db_retr_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void,
                                               key: gnutls_datum_t)
                              -> gnutls_datum_t>;
pub type gnutls_handshake_hook_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: gnutls_session_t,
                                               htype: ::libc::c_uint,
                                               post: ::libc::c_uint,
                                               incoming: ::libc::c_uint,
                                               msg: *const gnutls_datum_t)
                              -> ::libc::c_int>;
pub type gnutls_handshake_post_client_hello_func =
    ::std::option::Option<extern "C" fn(arg1: gnutls_session_t)
                              -> ::libc::c_int>;
pub enum Struct_gnutls_pubkey_st { }
pub type gnutls_pubkey_t = *mut Struct_gnutls_pubkey_st;
pub enum Struct_gnutls_privkey_st { }
pub type gnutls_privkey_t = *mut Struct_gnutls_privkey_st;
pub type gnutls_x509_privkey_t = *mut Struct_gnutls_x509_privkey_int;
pub enum Struct_gnutls_x509_crl_int { }
pub type gnutls_x509_crl_t = *mut Struct_gnutls_x509_crl_int;
pub enum Struct_gnutls_x509_crt_int { }
pub type gnutls_x509_crt_t = *mut Struct_gnutls_x509_crt_int;
pub enum Struct_gnutls_x509_crq_int { }
pub type gnutls_x509_crq_t = *mut Struct_gnutls_x509_crq_int;
pub enum Struct_gnutls_openpgp_keyring_int { }
pub type gnutls_openpgp_keyring_t = *mut Struct_gnutls_openpgp_keyring_int;
pub enum Struct_gnutls_certificate_credentials_st { }
pub type gnutls_certificate_credentials_t =
    *mut Struct_gnutls_certificate_credentials_st;
pub type gnutls_certificate_server_credentials =
    gnutls_certificate_credentials_t;
pub type gnutls_certificate_client_credentials =
    gnutls_certificate_credentials_t;
pub enum Struct_gnutls_anon_server_credentials_st { }
pub type gnutls_anon_server_credentials_t =
    *mut Struct_gnutls_anon_server_credentials_st;
pub enum Struct_gnutls_anon_client_credentials_st { }
pub type gnutls_anon_client_credentials_t =
    *mut Struct_gnutls_anon_client_credentials_st;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_gnutls_certificate_flags {
    GNUTLS_CERTIFICATE_SKIP_KEY_CERT_MATCH = 1,
    _DUMMY_GNUTLS_CERTIFICATE_FLAGS
}
pub type gnutls_certificate_flags = Enum_gnutls_certificate_flags;
pub type gnutls_status_request_ocsp_func =
    ::std::option::Option<unsafe extern "C" fn(session: gnutls_session_t,
                                               ptr: *mut ::libc::c_void,
                                               ocsp_response:
                                                   *mut gnutls_datum_t)
                              -> ::libc::c_int>;
pub type gnutls_time_func =
    ::std::option::Option<unsafe extern "C" fn(t: *mut time_t) -> time_t>;
pub type mutex_init_func =
    ::std::option::Option<unsafe extern "C" fn(mutex:
                                                   *mut *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type mutex_lock_func =
    ::std::option::Option<unsafe extern "C" fn(mutex:
                                                   *mut *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type mutex_unlock_func =
    ::std::option::Option<unsafe extern "C" fn(mutex:
                                                   *mut *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type mutex_deinit_func =
    ::std::option::Option<unsafe extern "C" fn(mutex:
                                                   *mut *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type gnutls_alloc_function =
    ::std::option::Option<extern "C" fn(arg1: size_t) -> *mut ::libc::c_void>;
pub type gnutls_calloc_function =
    ::std::option::Option<extern "C" fn(arg1: size_t, arg2: size_t)
                              -> *mut ::libc::c_void>;
pub type gnutls_is_secure_function =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub type gnutls_free_function =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void)>;
pub type gnutls_realloc_function =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void,
                                               arg2: size_t)
                              -> *mut ::libc::c_void>;
pub type gnutls_log_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::libc::c_int,
                                               arg2: *const ::libc::c_char)>;
pub type gnutls_audit_log_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: gnutls_session_t,
                                               arg2: *const ::libc::c_char)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed43 {
    pub iov_base: *mut ::libc::c_void,
    pub iov_len: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type giovec_t = Struct_Unnamed43;
pub type gnutls_pull_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: gnutls_transport_ptr_t,
                                               arg2: *mut ::libc::c_void,
                                               arg3: size_t) -> ssize_t>;
pub type gnutls_push_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: gnutls_transport_ptr_t,
                                               arg2: *const ::libc::c_void,
                                               arg3: size_t) -> ssize_t>;
pub type gnutls_pull_timeout_func =
    ::std::option::Option<extern "C" fn(arg1: gnutls_transport_ptr_t,
                                        ms: ::libc::c_uint) -> ::libc::c_int>;
pub type gnutls_vec_push_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: gnutls_transport_ptr_t,
                                               iov: *const giovec_t,
                                               iovcnt: ::libc::c_int)
                              -> ssize_t>;
pub type gnutls_errno_func =
    ::std::option::Option<extern "C" fn(arg1: gnutls_transport_ptr_t)
                              -> ::libc::c_int>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_gnutls_random_art { GNUTLS_RANDOM_ART_OPENSSH = 1, _DUMMY_GNUTLS_RANDOM }
pub type gnutls_random_art_t = Enum_gnutls_random_art;
pub enum Struct_gnutls_srp_server_credentials_st { }
pub type gnutls_srp_server_credentials_t =
    *mut Struct_gnutls_srp_server_credentials_st;
pub enum Struct_gnutls_srp_client_credentials_st { }
pub type gnutls_srp_client_credentials_t =
    *mut Struct_gnutls_srp_client_credentials_st;
pub type gnutls_srp_server_credentials_function =
    unsafe extern "C" fn(arg1: gnutls_session_t,
                         username: *const ::libc::c_char,
                         salt: *mut gnutls_datum_t,
                         verifier: *mut gnutls_datum_t,
                         generator: *mut gnutls_datum_t,
                         prime: *mut gnutls_datum_t) -> ::libc::c_int;
pub type gnutls_srp_client_credentials_function =
    unsafe extern "C" fn(arg1: gnutls_session_t,
                         arg2: *mut *mut ::libc::c_char,
                         arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
pub enum Struct_gnutls_psk_server_credentials_st { }
pub type gnutls_psk_server_credentials_t =
    *mut Struct_gnutls_psk_server_credentials_st;
pub enum Struct_gnutls_psk_client_credentials_st { }
pub type gnutls_psk_client_credentials_t =
    *mut Struct_gnutls_psk_client_credentials_st;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_gnutls_psk_key_flags {
    GNUTLS_PSK_KEY_RAW = 0,
    GNUTLS_PSK_KEY_HEX = 1,
}
pub type gnutls_psk_key_flags = Enum_gnutls_psk_key_flags;
pub type gnutls_psk_server_credentials_function =
    unsafe extern "C" fn(arg1: gnutls_session_t,
                         username: *const ::libc::c_char,
                         key: *mut gnutls_datum_t) -> ::libc::c_int;
pub type gnutls_psk_client_credentials_function =
    unsafe extern "C" fn(arg1: gnutls_session_t,
                         username: *mut *mut ::libc::c_char,
                         key: *mut gnutls_datum_t) -> ::libc::c_int;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_gnutls_x509_subject_alt_name_t {
    GNUTLS_SAN_DNSNAME = 1,
    GNUTLS_SAN_RFC822NAME = 2,
    GNUTLS_SAN_URI = 3,
    GNUTLS_SAN_IPADDRESS = 4,
    GNUTLS_SAN_OTHERNAME = 5,
    GNUTLS_SAN_DN = 6,
    GNUTLS_SAN_OTHERNAME_XMPP = 1000,
}
pub type gnutls_x509_subject_alt_name_t = Enum_gnutls_x509_subject_alt_name_t;
pub enum Struct_gnutls_openpgp_crt_int { }
pub type gnutls_openpgp_crt_t = *mut Struct_gnutls_openpgp_crt_int;
pub enum Struct_gnutls_openpgp_privkey_int { }
pub type gnutls_openpgp_privkey_t = *mut Struct_gnutls_openpgp_privkey_int;
pub enum Struct_gnutls_pkcs11_privkey_st { }
pub type gnutls_pkcs11_privkey_t = *mut Struct_gnutls_pkcs11_privkey_st;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed44 {
    GNUTLS_PRIVKEY_X509 = 0,
    GNUTLS_PRIVKEY_OPENPGP = 1,
    GNUTLS_PRIVKEY_PKCS11 = 2,
    GNUTLS_PRIVKEY_EXT = 3,
}
pub type gnutls_privkey_type_t = Enum_Unnamed44;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_gnutls_retr2_st {
    pub cert_type: gnutls_certificate_type_t,
    pub key_type: gnutls_privkey_type_t,
    pub cert: Union_Unnamed45,
    pub ncerts: ::libc::c_uint,
    pub key: Union_Unnamed46,
    pub deinit_all: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_gnutls_retr2_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_gnutls_retr2_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed45 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed45 {
    pub unsafe fn x509(&mut self) -> *mut *mut gnutls_x509_crt_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pgp(&mut self) -> *mut gnutls_openpgp_crt_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed45 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed45 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed46 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed46 {
    pub unsafe fn x509(&mut self) -> *mut gnutls_x509_privkey_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pgp(&mut self) -> *mut gnutls_openpgp_privkey_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pkcs11(&mut self) -> *mut gnutls_pkcs11_privkey_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed46 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed46 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gnutls_retr2_st = Struct_gnutls_retr2_st;
pub type gnutls_certificate_retrieve_function =
    unsafe extern "C" fn(arg1: gnutls_session_t,
                         req_ca_rdn: *const gnutls_datum_t,
                         nreqs: ::libc::c_int,
                         pk_algos: *const gnutls_pk_algorithm_t,
                         pk_algos_length: ::libc::c_int,
                         arg2: *mut gnutls_retr2_st) -> ::libc::c_int;
pub type gnutls_tdb_store_func =
    ::std::option::Option<unsafe extern "C" fn(db_name: *const ::libc::c_char,
                                               host: *const ::libc::c_char,
                                               service: *const ::libc::c_char,
                                               expiration: time_t,
                                               pubkey: *const gnutls_datum_t)
                              -> ::libc::c_int>;
pub type gnutls_tdb_store_commitment_func =
    ::std::option::Option<unsafe extern "C" fn(db_name: *const ::libc::c_char,
                                               host: *const ::libc::c_char,
                                               service: *const ::libc::c_char,
                                               expiration: time_t,
                                               hash_algo:
                                                   gnutls_digest_algorithm_t,
                                               hash: *const gnutls_datum_t)
                              -> ::libc::c_int>;
pub type gnutls_tdb_verify_func =
    ::std::option::Option<unsafe extern "C" fn(db_name: *const ::libc::c_char,
                                               host: *const ::libc::c_char,
                                               service: *const ::libc::c_char,
                                               pubkey: *const gnutls_datum_t)
                              -> ::libc::c_int>;
pub enum Struct_gnutls_tdb_int { }
pub type gnutls_tdb_t = *mut Struct_gnutls_tdb_int;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed47 {
    GNUTLS_PIN_USER = 1,
    GNUTLS_PIN_SO = 2,
    GNUTLS_PIN_FINAL_TRY = 4,
    GNUTLS_PIN_COUNT_LOW = 8,
    GNUTLS_PIN_CONTEXT_SPECIFIC = 16,
    GNUTLS_PIN_WRONG = 32,
}
pub type gnutls_pin_flag_t = Enum_Unnamed47;
pub type gnutls_pin_callback_t =
    ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::libc::c_void,
                                               attempt: ::libc::c_int,
                                               token_url:
                                                   *const ::libc::c_char,
                                               token_label:
                                                   *const ::libc::c_char,
                                               flags: ::libc::c_uint,
                                               pin: *mut ::libc::c_char,
                                               pin_max: size_t)
                              -> ::libc::c_int>;
pub enum Struct_gnutls_buffer_st { }
pub type gnutls_buffer_t = *mut Struct_gnutls_buffer_st;
pub type gnutls_ext_priv_data_t = *mut ::libc::c_void;
pub type gnutls_ext_recv_func =
    ::std::option::Option<unsafe extern "C" fn(session: gnutls_session_t,
                                               data: *const ::libc::c_uchar,
                                               len: size_t) -> ::libc::c_int>;
pub type gnutls_ext_send_func =
    ::std::option::Option<extern "C" fn(session: gnutls_session_t,
                                        extdata: gnutls_buffer_t)
                              -> ::libc::c_int>;
pub type gnutls_ext_deinit_data_func =
    ::std::option::Option<extern "C" fn(data: gnutls_ext_priv_data_t)>;
pub type gnutls_ext_pack_func =
    ::std::option::Option<extern "C" fn(data: gnutls_ext_priv_data_t,
                                        packed_data: gnutls_buffer_t)
                              -> ::libc::c_int>;
pub type gnutls_ext_unpack_func =
    ::std::option::Option<unsafe extern "C" fn(packed_data: gnutls_buffer_t,
                                               data:
                                                   *mut gnutls_ext_priv_data_t)
                              -> ::libc::c_int>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed48 {
    GNUTLS_EXT_ANY = 0,
    GNUTLS_EXT_APPLICATION = 1,
    GNUTLS_EXT_TLS = 2,
    GNUTLS_EXT_MANDATORY = 3,
    GNUTLS_EXT_NONE = 4,
}
pub type gnutls_ext_parse_type_t = Enum_Unnamed48;
pub type gnutls_supp_recv_func =
    ::std::option::Option<unsafe extern "C" fn(session: gnutls_session_t,
                                               data: *const ::libc::c_uchar,
                                               data_size: size_t)
                              -> ::libc::c_int>;
pub type gnutls_supp_send_func =
    ::std::option::Option<extern "C" fn(session: gnutls_session_t,
                                        buf: gnutls_buffer_t)
                              -> ::libc::c_int>;
pub type gnutls_connection_end_t = ::libc::c_uint;
pub type gnutls_cipher_algorithm = gnutls_cipher_algorithm_t;
pub type gnutls_kx_algorithm = gnutls_kx_algorithm_t;
pub type gnutls_mac_algorithm = gnutls_mac_algorithm_t;
pub type gnutls_digest_algorithm = gnutls_digest_algorithm_t;
pub type gnutls_compression_method = gnutls_compression_method_t;
pub type gnutls_connection_end = gnutls_connection_end_t;
pub type gnutls_x509_crt_fmt = gnutls_x509_crt_fmt_t;
pub type gnutls_pk_algorithm = gnutls_pk_algorithm_t;
pub type gnutls_sign_algorithm = gnutls_sign_algorithm_t;
pub type gnutls_close_request = gnutls_close_request_t;
pub type gnutls_certificate_request = gnutls_certificate_request_t;
pub type gnutls_certificate_status = gnutls_certificate_status_t;
pub type gnutls_session = gnutls_session_t;
pub type gnutls_alert_level = gnutls_alert_level_t;
pub type gnutls_alert_description = gnutls_alert_description_t;
pub type gnutls_x509_subject_alt_name = gnutls_x509_subject_alt_name_t;
pub type gnutls_openpgp_privkey = gnutls_openpgp_privkey_t;
pub type gnutls_openpgp_keyring = gnutls_openpgp_keyring_t;
pub type gnutls_x509_crt = gnutls_x509_crt_t;
pub type gnutls_x509_privkey = gnutls_x509_privkey_t;
pub type gnutls_x509_crl = gnutls_x509_crl_t;
pub type gnutls_x509_crq = gnutls_x509_crq_t;
pub type gnutls_certificate_credentials = gnutls_certificate_credentials_t;
pub type gnutls_anon_server_credentials = gnutls_anon_server_credentials_t;
pub type gnutls_anon_client_credentials = gnutls_anon_client_credentials_t;
pub type gnutls_srp_client_credentials = gnutls_srp_client_credentials_t;
pub type gnutls_srp_server_credentials = gnutls_srp_server_credentials_t;
pub type gnutls_dh_params = gnutls_dh_params_t;
pub type gnutls_rsa_params = gnutls_rsa_params_t;
pub type gnutls_params_type = gnutls_params_type_t;
pub type gnutls_credentials_type = gnutls_credentials_type_t;
pub type gnutls_certificate_type = gnutls_certificate_type_t;
pub type gnutls_datum = gnutls_datum_t;
pub type gnutls_transport_ptr = gnutls_transport_ptr_t;
pub type gnutls_openpgp_key_status_t = gnutls_openpgp_crt_status_t;
pub type gnutls_openpgp_key_t = gnutls_openpgp_crt_t;
#[link(name = "gnutls")]
extern "C" {
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut gnutls_malloc: gnutls_alloc_function;
    pub static mut gnutls_realloc: gnutls_realloc_function;
    pub static mut gnutls_calloc: gnutls_calloc_function;
    pub static mut gnutls_free: gnutls_free_function;
    pub static mut gnutls_strdup:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *const ::libc::c_char)
                                         -> *mut ::libc::c_char>;
    pub static gnutls_srp_4096_group_prime: gnutls_datum_t;
    pub static gnutls_srp_4096_group_generator: gnutls_datum_t;
    pub static gnutls_srp_3072_group_prime: gnutls_datum_t;
    pub static gnutls_srp_3072_group_generator: gnutls_datum_t;
    pub static gnutls_srp_2048_group_prime: gnutls_datum_t;
    pub static gnutls_srp_2048_group_generator: gnutls_datum_t;
    pub static gnutls_srp_1536_group_prime: gnutls_datum_t;
    pub static gnutls_srp_1536_group_generator: gnutls_datum_t;
    pub static gnutls_srp_1024_group_prime: gnutls_datum_t;
    pub static gnutls_srp_1024_group_generator: gnutls_datum_t;
}
#[link(name = "gnutls")]
extern "C" {
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char, __maxsize: size_t,
                    __format: *const ::libc::c_char, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char, __maxsize: size_t,
                      __format: *const ::libc::c_char, __tp: *const Struct_tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn timespec_get(__ts: *mut Struct_timespec, __base: ::libc::c_int)
     -> ::libc::c_int;
    pub fn gnutls_handshake_description_get_name(_type:
                                                     gnutls_handshake_description_t)
     -> *const ::libc::c_char;
    pub fn gnutls_pk_algorithm_get_name(algorithm: gnutls_pk_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_init(session: *mut gnutls_session_t, flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_deinit(session: gnutls_session_t);
    pub fn gnutls_bye(session: gnutls_session_t, how: gnutls_close_request_t)
     -> ::libc::c_int;
    pub fn gnutls_handshake(session: gnutls_session_t) -> ::libc::c_int;
    pub fn gnutls_handshake_set_timeout(session: gnutls_session_t,
                                        ms: ::libc::c_uint);
    pub fn gnutls_rehandshake(session: gnutls_session_t) -> ::libc::c_int;
    pub fn gnutls_alert_get(session: gnutls_session_t)
     -> gnutls_alert_description_t;
    pub fn gnutls_alert_send(session: gnutls_session_t,
                             level: gnutls_alert_level_t,
                             desc: gnutls_alert_description_t)
     -> ::libc::c_int;
    pub fn gnutls_alert_send_appropriate(session: gnutls_session_t,
                                         err: ::libc::c_int) -> ::libc::c_int;
    pub fn gnutls_alert_get_name(alert: gnutls_alert_description_t)
     -> *const ::libc::c_char;
    pub fn gnutls_alert_get_strname(alert: gnutls_alert_description_t)
     -> *const ::libc::c_char;
    pub fn gnutls_pk_bits_to_sec_param(algo: gnutls_pk_algorithm_t,
                                       bits: ::libc::c_uint)
     -> gnutls_sec_param_t;
    pub fn gnutls_sec_param_get_name(param: gnutls_sec_param_t)
     -> *const ::libc::c_char;
    pub fn gnutls_sec_param_to_pk_bits(algo: gnutls_pk_algorithm_t,
                                       param: gnutls_sec_param_t)
     -> ::libc::c_uint;
    pub fn gnutls_sec_param_to_symmetric_bits(param: gnutls_sec_param_t)
     -> ::libc::c_uint;
    pub fn gnutls_ecc_curve_get_name(curve: gnutls_ecc_curve_t)
     -> *const ::libc::c_char;
    pub fn gnutls_ecc_curve_get_oid(curve: gnutls_ecc_curve_t)
     -> *const ::libc::c_char;
    pub fn gnutls_ecc_curve_get_size(curve: gnutls_ecc_curve_t)
     -> ::libc::c_int;
    pub fn gnutls_ecc_curve_get(session: gnutls_session_t)
     -> gnutls_ecc_curve_t;
    pub fn gnutls_cipher_get(session: gnutls_session_t)
     -> gnutls_cipher_algorithm_t;
    pub fn gnutls_kx_get(session: gnutls_session_t) -> gnutls_kx_algorithm_t;
    pub fn gnutls_mac_get(session: gnutls_session_t)
     -> gnutls_mac_algorithm_t;
    pub fn gnutls_compression_get(session: gnutls_session_t)
     -> gnutls_compression_method_t;
    pub fn gnutls_certificate_type_get(session: gnutls_session_t)
     -> gnutls_certificate_type_t;
    pub fn gnutls_sign_algorithm_get(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_sign_algorithm_get_client(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_sign_algorithm_get_requested(session: gnutls_session_t,
                                               indx: size_t,
                                               algo:
                                                   *mut gnutls_sign_algorithm_t)
     -> ::libc::c_int;
    pub fn gnutls_cipher_get_name(algorithm: gnutls_cipher_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_mac_get_name(algorithm: gnutls_mac_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_digest_get_name(algorithm: gnutls_digest_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_digest_get_oid(algorithm: gnutls_digest_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_compression_get_name(algorithm: gnutls_compression_method_t)
     -> *const ::libc::c_char;
    pub fn gnutls_kx_get_name(algorithm: gnutls_kx_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_certificate_type_get_name(_type: gnutls_certificate_type_t)
     -> *const ::libc::c_char;
    pub fn gnutls_pk_get_name(algorithm: gnutls_pk_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_pk_get_oid(algorithm: gnutls_pk_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_sign_get_name(algorithm: gnutls_sign_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_sign_get_oid(algorithm: gnutls_sign_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_cipher_get_key_size(algorithm: gnutls_cipher_algorithm_t)
     -> size_t;
    pub fn gnutls_mac_get_key_size(algorithm: gnutls_mac_algorithm_t)
     -> size_t;
    pub fn gnutls_sign_is_secure(algorithm: gnutls_sign_algorithm_t)
     -> ::libc::c_int;
    pub fn gnutls_sign_get_hash_algorithm(sign: gnutls_sign_algorithm_t)
     -> gnutls_digest_algorithm_t;
    pub fn gnutls_sign_get_pk_algorithm(sign: gnutls_sign_algorithm_t)
     -> gnutls_pk_algorithm_t;
    pub fn gnutls_pk_to_sign(pk: gnutls_pk_algorithm_t,
                             hash: gnutls_digest_algorithm_t)
     -> gnutls_sign_algorithm_t;
    pub fn gnutls_mac_get_id(name: *const ::libc::c_char)
     -> gnutls_mac_algorithm_t;
    pub fn gnutls_digest_get_id(name: *const ::libc::c_char)
     -> gnutls_digest_algorithm_t;
    pub fn gnutls_compression_get_id(name: *const ::libc::c_char)
     -> gnutls_compression_method_t;
    pub fn gnutls_cipher_get_id(name: *const ::libc::c_char)
     -> gnutls_cipher_algorithm_t;
    pub fn gnutls_kx_get_id(name: *const ::libc::c_char)
     -> gnutls_kx_algorithm_t;
    pub fn gnutls_protocol_get_id(name: *const ::libc::c_char)
     -> gnutls_protocol_t;
    pub fn gnutls_certificate_type_get_id(name: *const ::libc::c_char)
     -> gnutls_certificate_type_t;
    pub fn gnutls_pk_get_id(name: *const ::libc::c_char)
     -> gnutls_pk_algorithm_t;
    pub fn gnutls_sign_get_id(name: *const ::libc::c_char)
     -> gnutls_sign_algorithm_t;
    pub fn gnutls_ecc_curve_get_id(name: *const ::libc::c_char)
     -> gnutls_ecc_curve_t;
    pub fn gnutls_oid_to_digest(oid: *const ::libc::c_char)
     -> gnutls_digest_algorithm_t;
    pub fn gnutls_oid_to_pk(oid: *const ::libc::c_char)
     -> gnutls_pk_algorithm_t;
    pub fn gnutls_oid_to_sign(oid: *const ::libc::c_char)
     -> gnutls_sign_algorithm_t;
    pub fn gnutls_oid_to_ecc_curve(oid: *const ::libc::c_char)
     -> gnutls_ecc_curve_t;
    pub fn gnutls_ecc_curve_list() -> *const gnutls_ecc_curve_t;
    pub fn gnutls_cipher_list() -> *const gnutls_cipher_algorithm_t;
    pub fn gnutls_mac_list() -> *const gnutls_mac_algorithm_t;
    pub fn gnutls_digest_list() -> *const gnutls_digest_algorithm_t;
    pub fn gnutls_compression_list() -> *const gnutls_compression_method_t;
    pub fn gnutls_protocol_list() -> *const gnutls_protocol_t;
    pub fn gnutls_certificate_type_list() -> *const gnutls_certificate_type_t;
    pub fn gnutls_kx_list() -> *const gnutls_kx_algorithm_t;
    pub fn gnutls_pk_list() -> *const gnutls_pk_algorithm_t;
    pub fn gnutls_sign_list() -> *const gnutls_sign_algorithm_t;
    pub fn gnutls_cipher_suite_info(idx: size_t, cs_id: *mut ::libc::c_uchar,
                                    kx: *mut gnutls_kx_algorithm_t,
                                    cipher: *mut gnutls_cipher_algorithm_t,
                                    mac: *mut gnutls_mac_algorithm_t,
                                    min_version: *mut gnutls_protocol_t)
     -> *const ::libc::c_char;
    pub fn gnutls_error_is_fatal(error: ::libc::c_int) -> ::libc::c_int;
    pub fn gnutls_error_to_alert(err: ::libc::c_int,
                                 level: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn gnutls_perror(error: ::libc::c_int);
    pub fn gnutls_strerror(error: ::libc::c_int) -> *const ::libc::c_char;
    pub fn gnutls_strerror_name(error: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn gnutls_handshake_set_private_extensions(session: gnutls_session_t,
                                                   allow: ::libc::c_int);
    pub fn gnutls_handshake_set_random(session: gnutls_session_t,
                                       random: *const gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_handshake_get_last_out(session: gnutls_session_t)
     -> gnutls_handshake_description_t;
    pub fn gnutls_handshake_get_last_in(session: gnutls_session_t)
     -> gnutls_handshake_description_t;
    pub fn gnutls_heartbeat_ping(session: gnutls_session_t, data_size: size_t,
                                 max_tries: ::libc::c_uint,
                                 flags: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_heartbeat_pong(session: gnutls_session_t,
                                 flags: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_record_set_timeout(session: gnutls_session_t,
                                     ms: ::libc::c_uint);
    pub fn gnutls_record_disable_padding(session: gnutls_session_t);
    pub fn gnutls_record_cork(session: gnutls_session_t);
    pub fn gnutls_record_uncork(session: gnutls_session_t,
                                flags: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_record_discard_queued(session: gnutls_session_t) -> size_t;
    pub fn gnutls_record_get_state(session: gnutls_session_t,
                                   read: ::libc::c_uint,
                                   mac_key: *mut gnutls_datum_t,
                                   IV: *mut gnutls_datum_t,
                                   cipher_key: *mut gnutls_datum_t,
                                   seq_number: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn gnutls_record_set_state(session: gnutls_session_t,
                                   read: ::libc::c_uint,
                                   seq_number: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn gnutls_range_split(session: gnutls_session_t,
                              orig: *const gnutls_range_st,
                              small_range: *mut gnutls_range_st,
                              rem_range: *mut gnutls_range_st)
     -> ::libc::c_int;
    pub fn gnutls_record_send(session: gnutls_session_t,
                              data: *const ::libc::c_void, data_size: size_t)
     -> ssize_t;
    pub fn gnutls_record_send_range(session: gnutls_session_t,
                                    data: *const ::libc::c_void,
                                    data_size: size_t,
                                    range: *const gnutls_range_st) -> ssize_t;
    pub fn gnutls_record_recv(session: gnutls_session_t,
                              data: *mut ::libc::c_void, data_size: size_t)
     -> ssize_t;
    pub fn gnutls_record_recv_packet(session: gnutls_session_t,
                                     packet: *mut gnutls_packet_t) -> ssize_t;
    pub fn gnutls_packet_get(packet: gnutls_packet_t,
                             data: *mut gnutls_datum_t,
                             sequence: *mut ::libc::c_uchar);
    pub fn gnutls_packet_deinit(packet: gnutls_packet_t);
    pub fn gnutls_record_recv_seq(session: gnutls_session_t,
                                  data: *mut ::libc::c_void,
                                  data_size: size_t,
                                  seq: *mut ::libc::c_uchar) -> ssize_t;
    pub fn gnutls_record_overhead_size(session: gnutls_session_t) -> size_t;
    pub fn gnutls_est_record_overhead_size(version: gnutls_protocol_t,
                                           cipher: gnutls_cipher_algorithm_t,
                                           mac: gnutls_mac_algorithm_t,
                                           comp: gnutls_compression_method_t,
                                           flags: ::libc::c_uint) -> size_t;
    pub fn gnutls_session_enable_compatibility_mode(session:
                                                        gnutls_session_t);
    pub fn gnutls_record_can_use_length_hiding(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_record_get_direction(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_record_get_max_size(session: gnutls_session_t) -> size_t;
    pub fn gnutls_record_set_max_size(session: gnutls_session_t, size: size_t)
     -> ssize_t;
    pub fn gnutls_record_check_pending(session: gnutls_session_t) -> size_t;
    pub fn gnutls_record_check_corked(session: gnutls_session_t) -> size_t;
    pub fn gnutls_session_force_valid(session: gnutls_session_t);
    pub fn gnutls_prf(session: gnutls_session_t, label_size: size_t,
                      label: *const ::libc::c_char,
                      server_random_first: ::libc::c_int, extra_size: size_t,
                      extra: *const ::libc::c_char, outsize: size_t,
                      out: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn gnutls_prf_rfc5705(session: gnutls_session_t, label_size: size_t,
                              label: *const ::libc::c_char,
                              context_size: size_t,
                              context: *const ::libc::c_char, outsize: size_t,
                              out: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn gnutls_prf_raw(session: gnutls_session_t, label_size: size_t,
                          label: *const ::libc::c_char, seed_size: size_t,
                          seed: *const ::libc::c_char, outsize: size_t,
                          out: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn gnutls_server_name_set(session: gnutls_session_t,
                                  _type: gnutls_server_name_type_t,
                                  name: *const ::libc::c_void,
                                  name_length: size_t) -> ::libc::c_int;
    pub fn gnutls_server_name_get(session: gnutls_session_t,
                                  data: *mut ::libc::c_void,
                                  data_length: *mut size_t,
                                  _type: *mut ::libc::c_uint,
                                  indx: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_heartbeat_get_timeout(session: gnutls_session_t)
     -> ::libc::c_uint;
    pub fn gnutls_heartbeat_set_timeouts(session: gnutls_session_t,
                                         retrans_timeout: ::libc::c_uint,
                                         total_timeout: ::libc::c_uint);
    pub fn gnutls_heartbeat_enable(session: gnutls_session_t,
                                   _type: ::libc::c_uint);
    pub fn gnutls_heartbeat_allowed(session: gnutls_session_t,
                                    _type: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_safe_renegotiation_status(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_session_ext_master_secret_status(session: gnutls_session_t)
     -> ::libc::c_uint;
    pub fn gnutls_session_etm_status(session: gnutls_session_t)
     -> ::libc::c_uint;
    pub fn gnutls_supplemental_get_name(_type:
                                            gnutls_supplemental_data_format_type_t)
     -> *const ::libc::c_char;
    pub fn gnutls_session_ticket_key_generate(key: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_session_ticket_enable_client(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_session_ticket_enable_server(session: gnutls_session_t,
                                               key: *const gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_srtp_set_profile(session: gnutls_session_t,
                                   profile: gnutls_srtp_profile_t)
     -> ::libc::c_int;
    pub fn gnutls_srtp_set_profile_direct(session: gnutls_session_t,
                                          profiles: *const ::libc::c_char,
                                          err_pos: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_srtp_get_selected_profile(session: gnutls_session_t,
                                            profile:
                                                *mut gnutls_srtp_profile_t)
     -> ::libc::c_int;
    pub fn gnutls_srtp_get_profile_name(profile: gnutls_srtp_profile_t)
     -> *const ::libc::c_char;
    pub fn gnutls_srtp_get_profile_id(name: *const ::libc::c_char,
                                      profile: *mut gnutls_srtp_profile_t)
     -> ::libc::c_int;
    pub fn gnutls_srtp_get_keys(session: gnutls_session_t,
                                key_material: *mut ::libc::c_void,
                                key_material_size: ::libc::c_uint,
                                client_key: *mut gnutls_datum_t,
                                client_salt: *mut gnutls_datum_t,
                                server_key: *mut gnutls_datum_t,
                                server_salt: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_srtp_set_mki(session: gnutls_session_t,
                               mki: *const gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_srtp_get_mki(session: gnutls_session_t,
                               mki: *mut gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_alpn_get_selected_protocol(session: gnutls_session_t,
                                             protocol: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_alpn_set_protocols(session: gnutls_session_t,
                                     protocols: *const gnutls_datum_t,
                                     protocols_size: ::libc::c_uint,
                                     flags: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_key_generate(key: *mut gnutls_datum_t,
                               key_size: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_priority_init(priority_cache: *mut gnutls_priority_t,
                                priorities: *const ::libc::c_char,
                                err_pos: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_priority_deinit(priority_cache: gnutls_priority_t);
    pub fn gnutls_priority_get_cipher_suite_index(pcache: gnutls_priority_t,
                                                  idx: ::libc::c_uint,
                                                  sidx: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_string_list(iter: ::libc::c_uint,
                                       flags: ::libc::c_uint)
     -> *const ::libc::c_char;
    pub fn gnutls_priority_set(session: gnutls_session_t,
                               priority: gnutls_priority_t) -> ::libc::c_int;
    pub fn gnutls_priority_set_direct(session: gnutls_session_t,
                                      priorities: *const ::libc::c_char,
                                      err_pos: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_priority_certificate_type_list(pcache: gnutls_priority_t,
                                                 list:
                                                     *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_sign_list(pcache: gnutls_priority_t,
                                     list: *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_protocol_list(pcache: gnutls_priority_t,
                                         list: *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_compression_list(pcache: gnutls_priority_t,
                                            list: *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_ecc_curve_list(pcache: gnutls_priority_t,
                                          list: *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_kx_list(pcache: gnutls_priority_t,
                                   list: *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_cipher_list(pcache: gnutls_priority_t,
                                       list: *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_priority_mac_list(pcache: gnutls_priority_t,
                                    list: *mut *const ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_set_default_priority(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_cipher_suite_get_name(kx_algorithm: gnutls_kx_algorithm_t,
                                        cipher_algorithm:
                                            gnutls_cipher_algorithm_t,
                                        mac_algorithm: gnutls_mac_algorithm_t)
     -> *const ::libc::c_char;
    pub fn gnutls_protocol_get_version(session: gnutls_session_t)
     -> gnutls_protocol_t;
    pub fn gnutls_protocol_get_name(version: gnutls_protocol_t)
     -> *const ::libc::c_char;
    pub fn gnutls_session_set_data(session: gnutls_session_t,
                                   session_data: *const ::libc::c_void,
                                   session_data_size: size_t)
     -> ::libc::c_int;
    pub fn gnutls_session_get_data(session: gnutls_session_t,
                                   session_data: *mut ::libc::c_void,
                                   session_data_size: *mut size_t)
     -> ::libc::c_int;
    pub fn gnutls_session_get_data2(session: gnutls_session_t,
                                    data: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_session_get_random(session: gnutls_session_t,
                                     client: *mut gnutls_datum_t,
                                     server: *mut gnutls_datum_t);
    pub fn gnutls_session_get_desc(session: gnutls_session_t)
     -> *mut ::libc::c_char;
    pub fn gnutls_session_set_verify_function(session: gnutls_session_t,
                                              func:
                                                  *mut ::std::option::Option<extern "C" fn()
                                                                                 ->
                                                                                     ::libc::c_int>);
    pub fn gnutls_session_set_verify_cert(session: gnutls_session_t,
                                          hostname: *const ::libc::c_char,
                                          flags: ::libc::c_uint);
    pub fn gnutls_session_set_verify_cert2(session: gnutls_session_t,
                                           data: *mut gnutls_typed_vdata_st,
                                           elements: ::libc::c_uint,
                                           flags: ::libc::c_uint);
    pub fn gnutls_session_get_verify_cert_status(arg1: gnutls_session_t)
     -> ::libc::c_uint;
    pub fn gnutls_session_set_premaster(session: gnutls_session_t,
                                        entity: ::libc::c_uint,
                                        version: gnutls_protocol_t,
                                        kx: gnutls_kx_algorithm_t,
                                        cipher: gnutls_cipher_algorithm_t,
                                        mac: gnutls_mac_algorithm_t,
                                        comp: gnutls_compression_method_t,
                                        master: *const gnutls_datum_t,
                                        session_id: *const gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_session_get_id(session: gnutls_session_t,
                                 session_id: *mut ::libc::c_void,
                                 session_id_size: *mut size_t)
     -> ::libc::c_int;
    pub fn gnutls_session_get_id2(session: gnutls_session_t,
                                  session_id: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_session_set_id(session: gnutls_session_t,
                                 sid: *const gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_session_channel_binding(session: gnutls_session_t,
                                          cbtype: gnutls_channel_binding_t,
                                          cb: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_session_is_resumed(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_session_resumption_requested(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_db_set_cache_expiration(session: gnutls_session_t,
                                          seconds: ::libc::c_int);
    pub fn gnutls_db_get_default_cache_expiration() -> ::libc::c_uint;
    pub fn gnutls_db_remove_session(session: gnutls_session_t);
    pub fn gnutls_db_set_retrieve_function(session: gnutls_session_t,
                                           retr_func: gnutls_db_retr_func);
    pub fn gnutls_db_set_remove_function(session: gnutls_session_t,
                                         rem_func: gnutls_db_remove_func);
    pub fn gnutls_db_set_store_function(session: gnutls_session_t,
                                        store_func: gnutls_db_store_func);
    pub fn gnutls_db_set_ptr(session: gnutls_session_t,
                             ptr: *mut ::libc::c_void);
    pub fn gnutls_db_get_ptr(session: gnutls_session_t)
     -> *mut ::libc::c_void;
    pub fn gnutls_db_check_entry(session: gnutls_session_t,
                                 session_entry: gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_db_check_entry_time(entry: *mut gnutls_datum_t) -> time_t;
    pub fn gnutls_handshake_set_hook_function(session: gnutls_session_t,
                                              htype: ::libc::c_uint,
                                              post: ::libc::c_int,
                                              func:
                                                  gnutls_handshake_hook_func);
    pub fn gnutls_handshake_set_post_client_hello_function(session:
                                                               gnutls_session_t,
                                                           func:
                                                               gnutls_handshake_post_client_hello_func);
    pub fn gnutls_handshake_set_max_packet_length(session: gnutls_session_t,
                                                  max: size_t);
    pub fn gnutls_check_version(req_version: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn gnutls_credentials_clear(session: gnutls_session_t);
    pub fn gnutls_credentials_set(session: gnutls_session_t,
                                  _type: gnutls_credentials_type_t,
                                  cred: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn gnutls_credentials_get(session: gnutls_session_t,
                                  _type: gnutls_credentials_type_t,
                                  cred: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn gnutls_anon_free_server_credentials(sc:
                                                   gnutls_anon_server_credentials_t);
    pub fn gnutls_anon_allocate_server_credentials(sc:
                                                       *mut gnutls_anon_server_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_anon_set_server_dh_params(res:
                                                gnutls_anon_server_credentials_t,
                                            dh_params: gnutls_dh_params_t);
    pub fn gnutls_anon_set_server_params_function(res:
                                                      gnutls_anon_server_credentials_t,
                                                  func:
                                                      *mut ::std::option::Option<extern "C" fn()
                                                                                     ->
                                                                                         ::libc::c_int>);
    pub fn gnutls_anon_free_client_credentials(sc:
                                                   gnutls_anon_client_credentials_t);
    pub fn gnutls_anon_allocate_client_credentials(sc:
                                                       *mut gnutls_anon_client_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_free_credentials(sc:
                                                   gnutls_certificate_credentials_t);
    pub fn gnutls_certificate_allocate_credentials(res:
                                                       *mut gnutls_certificate_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_get_issuer(sc: gnutls_certificate_credentials_t,
                                         cert: gnutls_x509_crt_t,
                                         issuer: *mut gnutls_x509_crt_t,
                                         flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_certificate_get_crt_raw(sc:
                                              gnutls_certificate_credentials_t,
                                          idx1: ::libc::c_uint,
                                          idx2: ::libc::c_uint,
                                          cert: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_get_x509_crt(res:
                                               gnutls_certificate_credentials_t,
                                           index: ::libc::c_uint,
                                           crt_list:
                                               *mut *mut gnutls_x509_crt_t,
                                           crt_list_size: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_certificate_get_x509_key(res:
                                               gnutls_certificate_credentials_t,
                                           index: ::libc::c_uint,
                                           key: *mut gnutls_x509_privkey_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_free_keys(sc: gnutls_certificate_credentials_t);
    pub fn gnutls_certificate_free_cas(sc: gnutls_certificate_credentials_t);
    pub fn gnutls_certificate_free_ca_names(sc:
                                                gnutls_certificate_credentials_t);
    pub fn gnutls_certificate_free_crls(sc: gnutls_certificate_credentials_t);
    pub fn gnutls_certificate_set_dh_params(res:
                                                gnutls_certificate_credentials_t,
                                            dh_params: gnutls_dh_params_t);
    pub fn gnutls_certificate_set_verify_flags(res:
                                                   gnutls_certificate_credentials_t,
                                               flags: ::libc::c_uint);
    pub fn gnutls_certificate_get_verify_flags(arg1:
                                                   gnutls_certificate_credentials_t)
     -> ::libc::c_uint;
    pub fn gnutls_certificate_set_flags(arg1:
                                            gnutls_certificate_credentials_t,
                                        flags: ::libc::c_uint);
    pub fn gnutls_certificate_set_verify_limits(res:
                                                    gnutls_certificate_credentials_t,
                                                max_bits: ::libc::c_uint,
                                                max_depth: ::libc::c_uint);
    pub fn gnutls_certificate_set_x509_system_trust(cred:
                                                        gnutls_certificate_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_trust_file(cred:
                                                      gnutls_certificate_credentials_t,
                                                  cafile:
                                                      *const ::libc::c_char,
                                                  _type:
                                                      gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_trust_dir(cred:
                                                     gnutls_certificate_credentials_t,
                                                 ca_dir:
                                                     *const ::libc::c_char,
                                                 _type: gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_trust_mem(res:
                                                     gnutls_certificate_credentials_t,
                                                 ca: *const gnutls_datum_t,
                                                 _type: gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_crl_file(res:
                                                    gnutls_certificate_credentials_t,
                                                crlfile:
                                                    *const ::libc::c_char,
                                                _type: gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_crl_mem(res:
                                                   gnutls_certificate_credentials_t,
                                               CRL: *const gnutls_datum_t,
                                               _type: gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_key_file(res:
                                                    gnutls_certificate_credentials_t,
                                                certfile:
                                                    *const ::libc::c_char,
                                                keyfile:
                                                    *const ::libc::c_char,
                                                _type: gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_key_file2(res:
                                                     gnutls_certificate_credentials_t,
                                                 certfile:
                                                     *const ::libc::c_char,
                                                 keyfile:
                                                     *const ::libc::c_char,
                                                 _type: gnutls_x509_crt_fmt_t,
                                                 pass: *const ::libc::c_char,
                                                 flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_key_mem(res:
                                                   gnutls_certificate_credentials_t,
                                               cert: *const gnutls_datum_t,
                                               key: *const gnutls_datum_t,
                                               _type: gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_key_mem2(res:
                                                    gnutls_certificate_credentials_t,
                                                cert: *const gnutls_datum_t,
                                                key: *const gnutls_datum_t,
                                                _type: gnutls_x509_crt_fmt_t,
                                                pass: *const ::libc::c_char,
                                                flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_certificate_send_x509_rdn_sequence(session:
                                                         gnutls_session_t,
                                                     status: ::libc::c_int);
    pub fn gnutls_certificate_set_x509_simple_pkcs12_file(res:
                                                              gnutls_certificate_credentials_t,
                                                          pkcs12file:
                                                              *const ::libc::c_char,
                                                          _type:
                                                              gnutls_x509_crt_fmt_t,
                                                          password:
                                                              *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_simple_pkcs12_mem(res:
                                                             gnutls_certificate_credentials_t,
                                                         p12blob:
                                                             *const gnutls_datum_t,
                                                         _type:
                                                             gnutls_x509_crt_fmt_t,
                                                         password:
                                                             *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_key(res:
                                               gnutls_certificate_credentials_t,
                                           cert_list: *mut gnutls_x509_crt_t,
                                           cert_list_size: ::libc::c_int,
                                           key: gnutls_x509_privkey_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_trust(res:
                                                 gnutls_certificate_credentials_t,
                                             ca_list: *mut gnutls_x509_crt_t,
                                             ca_list_size: ::libc::c_int)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_x509_crl(res:
                                               gnutls_certificate_credentials_t,
                                           crl_list: *mut gnutls_x509_crl_t,
                                           crl_list_size: ::libc::c_int)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_ocsp_status_request_function(res:
                                                                   gnutls_certificate_credentials_t,
                                                               ocsp_func:
                                                                   gnutls_status_request_ocsp_func,
                                                               ptr:
                                                                   *mut ::libc::c_void);
    pub fn gnutls_certificate_set_ocsp_status_request_file(res:
                                                               gnutls_certificate_credentials_t,
                                                           response_file:
                                                               *const ::libc::c_char,
                                                           flags:
                                                               ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_ocsp_status_request_enable_client(session: gnutls_session_t,
                                                    responder_id:
                                                        *mut gnutls_datum_t,
                                                    responder_id_size: size_t,
                                                    request_extensions:
                                                        *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_ocsp_status_request_get(session: gnutls_session_t,
                                          response: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_ocsp_status_request_is_checked(session: gnutls_session_t,
                                                 flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_global_init() -> ::libc::c_int;
    pub fn gnutls_global_deinit();
    pub fn gnutls_global_set_mutex(init: mutex_init_func,
                                   deinit: mutex_deinit_func,
                                   lock: mutex_lock_func,
                                   unlock: mutex_unlock_func);
    pub fn gnutls_global_set_time_function(time_func: gnutls_time_func);
    pub fn gnutls_memset(data: *mut ::libc::c_void, c: ::libc::c_int,
                         size: size_t);
    pub fn gnutls_memcmp(s1: *const ::libc::c_void, s2: *const ::libc::c_void,
                         n: size_t) -> ::libc::c_int;
    pub fn gnutls_global_set_log_function(log_func: gnutls_log_func);
    pub fn gnutls_global_set_audit_log_function(log_func:
                                                    gnutls_audit_log_func);
    pub fn gnutls_global_set_log_level(level: ::libc::c_int);
    pub fn gnutls_dh_params_init(dh_params: *mut gnutls_dh_params_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_params_deinit(dh_params: gnutls_dh_params_t);
    pub fn gnutls_dh_params_import_raw(dh_params: gnutls_dh_params_t,
                                       prime: *const gnutls_datum_t,
                                       generator: *const gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_params_import_raw2(dh_params: gnutls_dh_params_t,
                                        prime: *const gnutls_datum_t,
                                        generator: *const gnutls_datum_t,
                                        key_bits: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_dh_params_import_pkcs3(params: gnutls_dh_params_t,
                                         pkcs3_params: *const gnutls_datum_t,
                                         format: gnutls_x509_crt_fmt_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_params_generate2(params: gnutls_dh_params_t,
                                      bits: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_dh_params_export_pkcs3(params: gnutls_dh_params_t,
                                         format: gnutls_x509_crt_fmt_t,
                                         params_data: *mut ::libc::c_uchar,
                                         params_data_size: *mut size_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_params_export2_pkcs3(params: gnutls_dh_params_t,
                                          format: gnutls_x509_crt_fmt_t,
                                          out: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_params_export_raw(params: gnutls_dh_params_t,
                                       prime: *mut gnutls_datum_t,
                                       generator: *mut gnutls_datum_t,
                                       bits: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_dh_params_cpy(dst: gnutls_dh_params_t,
                                src: gnutls_dh_params_t) -> ::libc::c_int;
    pub fn gnutls_system_recv_timeout(ptr: gnutls_transport_ptr_t,
                                      ms: ::libc::c_uint) -> ::libc::c_int;
    pub fn gnutls_transport_set_int2(session: gnutls_session_t,
                                     r: ::libc::c_int, s: ::libc::c_int);
    pub fn gnutls_transport_get_int2(session: gnutls_session_t,
                                     r: *mut ::libc::c_int,
                                     s: *mut ::libc::c_int);
    pub fn gnutls_transport_get_int(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_transport_set_ptr(session: gnutls_session_t,
                                    ptr: gnutls_transport_ptr_t);
    pub fn gnutls_transport_set_ptr2(session: gnutls_session_t,
                                     recv_ptr: gnutls_transport_ptr_t,
                                     send_ptr: gnutls_transport_ptr_t);
    pub fn gnutls_transport_get_ptr(session: gnutls_session_t)
     -> gnutls_transport_ptr_t;
    pub fn gnutls_transport_get_ptr2(session: gnutls_session_t,
                                     recv_ptr: *mut gnutls_transport_ptr_t,
                                     send_ptr: *mut gnutls_transport_ptr_t);
    pub fn gnutls_transport_set_vec_push_function(session: gnutls_session_t,
                                                  vec_func:
                                                      gnutls_vec_push_func);
    pub fn gnutls_transport_set_push_function(session: gnutls_session_t,
                                              push_func: gnutls_push_func);
    pub fn gnutls_transport_set_pull_function(session: gnutls_session_t,
                                              pull_func: gnutls_pull_func);
    pub fn gnutls_transport_set_pull_timeout_function(session:
                                                          gnutls_session_t,
                                                      func:
                                                          gnutls_pull_timeout_func);
    pub fn gnutls_transport_set_errno_function(session: gnutls_session_t,
                                               errno_func: gnutls_errno_func);
    pub fn gnutls_transport_set_errno(session: gnutls_session_t,
                                      err: ::libc::c_int);
    pub fn gnutls_session_set_ptr(session: gnutls_session_t,
                                  ptr: *mut ::libc::c_void);
    pub fn gnutls_session_get_ptr(session: gnutls_session_t)
     -> *mut ::libc::c_void;
    pub fn gnutls_openpgp_send_cert(session: gnutls_session_t,
                                    status: gnutls_openpgp_crt_status_t);
    pub fn gnutls_fingerprint(algo: gnutls_digest_algorithm_t,
                              data: *const gnutls_datum_t,
                              result: *mut ::libc::c_void,
                              result_size: *mut size_t) -> ::libc::c_int;
    pub fn gnutls_random_art(_type: gnutls_random_art_t,
                             key_type: *const ::libc::c_char,
                             key_size: ::libc::c_uint,
                             fpr: *mut ::libc::c_void, fpr_size: size_t,
                             art: *mut gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_srp_free_client_credentials(sc:
                                                  gnutls_srp_client_credentials_t);
    pub fn gnutls_srp_allocate_client_credentials(sc:
                                                      *mut gnutls_srp_client_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_srp_set_client_credentials(res:
                                                 gnutls_srp_client_credentials_t,
                                             username: *const ::libc::c_char,
                                             password: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_srp_free_server_credentials(sc:
                                                  gnutls_srp_server_credentials_t);
    pub fn gnutls_srp_allocate_server_credentials(sc:
                                                      *mut gnutls_srp_server_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_srp_set_server_credentials_file(res:
                                                      gnutls_srp_server_credentials_t,
                                                  password_file:
                                                      *const ::libc::c_char,
                                                  password_conf_file:
                                                      *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_srp_server_get_username(session: gnutls_session_t)
     -> *const ::libc::c_char;
    pub fn gnutls_srp_set_prime_bits(session: gnutls_session_t,
                                     bits: ::libc::c_uint);
    pub fn gnutls_srp_verifier(username: *const ::libc::c_char,
                               password: *const ::libc::c_char,
                               salt: *const gnutls_datum_t,
                               generator: *const gnutls_datum_t,
                               prime: *const gnutls_datum_t,
                               res: *mut gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_srp_set_server_credentials_function(cred:
                                                          gnutls_srp_server_credentials_t,
                                                      func:
                                                          *mut ::std::option::Option<extern "C" fn()
                                                                                         ->
                                                                                             ::libc::c_int>);
    pub fn gnutls_srp_set_client_credentials_function(cred:
                                                          gnutls_srp_client_credentials_t,
                                                      func:
                                                          *mut ::std::option::Option<extern "C" fn()
                                                                                         ->
                                                                                             ::libc::c_int>);
    pub fn gnutls_srp_base64_encode(data: *const gnutls_datum_t,
                                    result: *mut ::libc::c_char,
                                    result_size: *mut size_t)
     -> ::libc::c_int;
    pub fn gnutls_srp_base64_encode2(data: *const gnutls_datum_t,
                                     result: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_srp_base64_decode(b64_data: *const gnutls_datum_t,
                                    result: *mut ::libc::c_char,
                                    result_size: *mut size_t)
     -> ::libc::c_int;
    pub fn gnutls_srp_base64_decode2(b64_data: *const gnutls_datum_t,
                                     result: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_srp_set_server_fake_salt_seed(sc:
                                                    gnutls_srp_server_credentials_t,
                                                seed: *const gnutls_datum_t,
                                                salt_length: ::libc::c_uint);
    pub fn gnutls_psk_free_client_credentials(sc:
                                                  gnutls_psk_client_credentials_t);
    pub fn gnutls_psk_allocate_client_credentials(sc:
                                                      *mut gnutls_psk_client_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_psk_set_client_credentials(res:
                                                 gnutls_psk_client_credentials_t,
                                             username: *const ::libc::c_char,
                                             key: *const gnutls_datum_t,
                                             flags: gnutls_psk_key_flags)
     -> ::libc::c_int;
    pub fn gnutls_psk_free_server_credentials(sc:
                                                  gnutls_psk_server_credentials_t);
    pub fn gnutls_psk_allocate_server_credentials(sc:
                                                      *mut gnutls_psk_server_credentials_t)
     -> ::libc::c_int;
    pub fn gnutls_psk_set_server_credentials_file(res:
                                                      gnutls_psk_server_credentials_t,
                                                  password_file:
                                                      *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_psk_set_server_credentials_hint(res:
                                                      gnutls_psk_server_credentials_t,
                                                  hint: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_psk_server_get_username(session: gnutls_session_t)
     -> *const ::libc::c_char;
    pub fn gnutls_psk_client_get_hint(session: gnutls_session_t)
     -> *const ::libc::c_char;
    pub fn gnutls_psk_set_server_credentials_function(cred:
                                                          gnutls_psk_server_credentials_t,
                                                      func:
                                                          *mut ::std::option::Option<extern "C" fn()
                                                                                         ->
                                                                                             ::libc::c_int>);
    pub fn gnutls_psk_set_client_credentials_function(cred:
                                                          gnutls_psk_client_credentials_t,
                                                      func:
                                                          *mut ::std::option::Option<extern "C" fn()
                                                                                         ->
                                                                                             ::libc::c_int>);
    pub fn gnutls_hex_encode(data: *const gnutls_datum_t,
                             result: *mut ::libc::c_char,
                             result_size: *mut size_t) -> ::libc::c_int;
    pub fn gnutls_hex_decode(hex_data: *const gnutls_datum_t,
                             result: *mut ::libc::c_void,
                             result_size: *mut size_t) -> ::libc::c_int;
    pub fn gnutls_hex_encode2(data: *const gnutls_datum_t,
                              result: *mut gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_hex_decode2(data: *const gnutls_datum_t,
                              result: *mut gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_psk_set_server_dh_params(res:
                                               gnutls_psk_server_credentials_t,
                                           dh_params: gnutls_dh_params_t);
    pub fn gnutls_psk_set_server_params_function(res:
                                                     gnutls_psk_server_credentials_t,
                                                 func:
                                                     *mut ::std::option::Option<extern "C" fn()
                                                                                    ->
                                                                                        ::libc::c_int>);
    pub fn gnutls_auth_get_type(session: gnutls_session_t)
     -> gnutls_credentials_type_t;
    pub fn gnutls_auth_server_get_type(session: gnutls_session_t)
     -> gnutls_credentials_type_t;
    pub fn gnutls_auth_client_get_type(session: gnutls_session_t)
     -> gnutls_credentials_type_t;
    pub fn gnutls_dh_set_prime_bits(session: gnutls_session_t,
                                    bits: ::libc::c_uint);
    pub fn gnutls_dh_get_secret_bits(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_get_peers_public_bits(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_get_prime_bits(session: gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_get_group(session: gnutls_session_t,
                               raw_gen: *mut gnutls_datum_t,
                               raw_prime: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_dh_get_pubkey(session: gnutls_session_t,
                                raw_key: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_retrieve_function(cred:
                                                        gnutls_certificate_credentials_t,
                                                    func:
                                                        *mut ::std::option::Option<extern "C" fn()
                                                                                       ->
                                                                                           ::libc::c_int>);
    pub fn gnutls_certificate_set_verify_function(cred:
                                                      gnutls_certificate_credentials_t,
                                                  func:
                                                      *mut ::std::option::Option<extern "C" fn()
                                                                                     ->
                                                                                         ::libc::c_int>);
    pub fn gnutls_certificate_server_set_request(session: gnutls_session_t,
                                                 req:
                                                     gnutls_certificate_request_t);
    pub fn gnutls_certificate_get_peers(session: gnutls_session_t,
                                        list_size: *mut ::libc::c_uint)
     -> *const gnutls_datum_t;
    pub fn gnutls_certificate_get_ours(session: gnutls_session_t)
     -> *const gnutls_datum_t;
    pub fn gnutls_certificate_get_peers_subkey_id(session: gnutls_session_t,
                                                  id: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_activation_time_peers(session: gnutls_session_t)
     -> time_t;
    pub fn gnutls_certificate_expiration_time_peers(session: gnutls_session_t)
     -> time_t;
    pub fn gnutls_certificate_client_get_request_status(session:
                                                            gnutls_session_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_verify_peers2(session: gnutls_session_t,
                                            status: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_certificate_verify_peers3(session: gnutls_session_t,
                                            hostname: *const ::libc::c_char,
                                            status: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_certificate_verify_peers(session: gnutls_session_t,
                                           data: *mut gnutls_typed_vdata_st,
                                           elements: ::libc::c_uint,
                                           status: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_certificate_verification_status_print(status:
                                                            ::libc::c_uint,
                                                        _type:
                                                            gnutls_certificate_type_t,
                                                        out:
                                                            *mut gnutls_datum_t,
                                                        flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_pem_base64_encode(msg: *const ::libc::c_char,
                                    data: *const gnutls_datum_t,
                                    result: *mut ::libc::c_char,
                                    result_size: *mut size_t)
     -> ::libc::c_int;
    pub fn gnutls_pem_base64_decode(header: *const ::libc::c_char,
                                    b64_data: *const gnutls_datum_t,
                                    result: *mut ::libc::c_uchar,
                                    result_size: *mut size_t)
     -> ::libc::c_int;
    pub fn gnutls_pem_base64_encode2(msg: *const ::libc::c_char,
                                     data: *const gnutls_datum_t,
                                     result: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_pem_base64_decode2(header: *const ::libc::c_char,
                                     b64_data: *const gnutls_datum_t,
                                     result: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_params_function(res:
                                                      gnutls_certificate_credentials_t,
                                                  func:
                                                      *mut ::std::option::Option<extern "C" fn()
                                                                                     ->
                                                                                         ::libc::c_int>);
    pub fn gnutls_anon_set_params_function(res:
                                               gnutls_anon_server_credentials_t,
                                           func:
                                               *mut ::std::option::Option<extern "C" fn()
                                                                              ->
                                                                                  ::libc::c_int>);
    pub fn gnutls_psk_set_params_function(res:
                                              gnutls_psk_server_credentials_t,
                                          func:
                                              *mut ::std::option::Option<extern "C" fn()
                                                                             ->
                                                                                 ::libc::c_int>);
    pub fn gnutls_hex2bin(hex_data: *const ::libc::c_char, hex_size: size_t,
                          bin_data: *mut ::libc::c_void,
                          bin_size: *mut size_t) -> ::libc::c_int;
    pub fn gnutls_tdb_init(tdb: *mut gnutls_tdb_t) -> ::libc::c_int;
    pub fn gnutls_tdb_set_store_func(tdb: gnutls_tdb_t,
                                     store: gnutls_tdb_store_func);
    pub fn gnutls_tdb_set_store_commitment_func(tdb: gnutls_tdb_t,
                                                cstore:
                                                    gnutls_tdb_store_commitment_func);
    pub fn gnutls_tdb_set_verify_func(tdb: gnutls_tdb_t,
                                      verify: gnutls_tdb_verify_func);
    pub fn gnutls_tdb_deinit(tdb: gnutls_tdb_t);
    pub fn gnutls_verify_stored_pubkey(db_name: *const ::libc::c_char,
                                       tdb: gnutls_tdb_t,
                                       host: *const ::libc::c_char,
                                       service: *const ::libc::c_char,
                                       cert_type: gnutls_certificate_type_t,
                                       cert: *const gnutls_datum_t,
                                       flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_store_commitment(db_name: *const ::libc::c_char,
                                   tdb: gnutls_tdb_t,
                                   host: *const ::libc::c_char,
                                   service: *const ::libc::c_char,
                                   hash_algo: gnutls_digest_algorithm_t,
                                   hash: *const gnutls_datum_t,
                                   expiration: time_t, flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_store_pubkey(db_name: *const ::libc::c_char,
                               tdb: gnutls_tdb_t, host: *const ::libc::c_char,
                               service: *const ::libc::c_char,
                               cert_type: gnutls_certificate_type_t,
                               cert: *const gnutls_datum_t,
                               expiration: time_t, flags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_load_file(filename: *const ::libc::c_char,
                            data: *mut gnutls_datum_t) -> ::libc::c_int;
    pub fn gnutls_url_is_supported(url: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gnutls_certificate_set_pin_function(arg1:
                                                   gnutls_certificate_credentials_t,
                                               _fn: gnutls_pin_callback_t,
                                               userdata: *mut ::libc::c_void);
    pub fn gnutls_buffer_append_data(arg1: gnutls_buffer_t,
                                     data: *const ::libc::c_void,
                                     data_size: size_t) -> ::libc::c_int;
    pub fn gnutls_ext_set_data(session: gnutls_session_t,
                               _type: ::libc::c_uint,
                               arg1: gnutls_ext_priv_data_t);
    pub fn gnutls_ext_get_data(session: gnutls_session_t,
                               _type: ::libc::c_uint,
                               arg1: *mut gnutls_ext_priv_data_t)
     -> ::libc::c_int;
    pub fn gnutls_ext_register(name: *const ::libc::c_char,
                               _type: ::libc::c_int,
                               parse_type: gnutls_ext_parse_type_t,
                               recv_func: gnutls_ext_recv_func,
                               send_func: gnutls_ext_send_func,
                               deinit_func: gnutls_ext_deinit_data_func,
                               pack_func: gnutls_ext_pack_func,
                               unpack_func: gnutls_ext_unpack_func)
     -> ::libc::c_int;
    pub fn gnutls_supplemental_register(name: *const ::libc::c_char,
                                        _type:
                                            gnutls_supplemental_data_format_type_t,
                                        supp_recv_func: gnutls_supp_recv_func,
                                        supp_send_func: gnutls_supp_send_func)
     -> ::libc::c_int;
    pub fn gnutls_supplemental_recv(session: gnutls_session_t,
                                    do_recv_supplemental: ::libc::c_uint);
    pub fn gnutls_supplemental_send(session: gnutls_session_t,
                                    do_send_supplemental: ::libc::c_uint);
    pub fn gnutls_fips140_mode_enabled() -> ::libc::c_int;
    pub fn gnutls_x509_privkey_sign_hash(key: gnutls_x509_privkey_t,
                                         hash: *const gnutls_datum_t,
                                         signature: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_openpgp_privkey_sign_hash(key: gnutls_openpgp_privkey_t,
                                            hash: *const gnutls_datum_t,
                                            signature: *mut gnutls_datum_t)
     -> ::libc::c_int;
    pub fn gnutls_x509_crt_get_preferred_hash_algorithm(crt:
                                                            gnutls_x509_crt_t,
                                                        hash:
                                                            *mut gnutls_digest_algorithm_t,
                                                        mand:
                                                            *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gnutls_x509_crq_sign(crq: gnutls_x509_crq_t,
                                key: gnutls_x509_privkey_t) -> ::libc::c_int;
    pub fn gnutls_x509_crl_sign(crl: gnutls_x509_crl_t,
                                issuer: gnutls_x509_crt_t,
                                issuer_key: gnutls_x509_privkey_t)
     -> ::libc::c_int;
    pub fn gnutls_global_set_mem_functions(alloc_func: gnutls_alloc_function,
                                           secure_alloc_func:
                                               gnutls_alloc_function,
                                           is_secure_func:
                                               gnutls_is_secure_function,
                                           realloc_func:
                                               gnutls_realloc_function,
                                           free_func: gnutls_free_function);
}
